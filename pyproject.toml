[project]
name = "temporalio-samples"
version = "0.1a1"
description = "Temporal.io Python SDK samples"
authors = [{ name = "Temporal Technologies Inc", email = "sdk@temporal.io" }]
requires-python = "~=3.9"
readme = "README.md"
license = "MIT"
dependencies = ["temporalio>=1.11.1,<2"]

[project.urls]
Homepage = "https://github.com/temporalio/samples-python"
Repository = "https://github.com/temporalio/samples-python"
Documentation = "https://docs.temporal.io/docs/python"
"Bug Tracker" = "https://github.com/temporalio/samples-python/issues"

[dependency-groups]
dev = [
    "black>=22.3.0,<23",
    "isort>=5.10.1,<6",
    "mypy>=1.4.1,<2",
    "pytest>=7.1.2,<8",
    "pytest-asyncio>=0.18.3,<0.19",
    "frozenlist>=1.4.0,<2",
    "types-pyyaml>=6.0.12.20241230,<7",
]
bedrock = ["boto3>=1.34.92,<2"]
dsl = [
    "pyyaml>=6.0.1,<7",
    "types-pyyaml>=6.0.12,<7",
    "dacite>=1.8.1,<2",
]
encryption = [
    "cryptography>=38.0.1,<39",
    "aiohttp>=3.8.1,<4",
]
gevent = ["gevent==25.4.2 ; python_version >= '3.8'"]
langchain = [
    "langchain>=0.1.7,<0.2 ; python_version >= '3.8.1' and python_version < '4.0'",
    "langchain-openai>=0.0.6,<0.0.7 ; python_version >= '3.8.1' and python_version < '4.0'",
    "openai>=1.4.0,<2",
    "fastapi>=0.105.0,<0.106",
    "tqdm>=4.62.0,<5",
    "uvicorn[standard]>=0.24.0.post1,<0.25",
]
open-telemetry = [
    "temporalio[opentelemetry]",
    "opentelemetry-exporter-otlp-proto-grpc==1.18.0",
]
pydantic-converter = ["pydantic>=2.10.6,<3"]
sentry = ["sentry-sdk>=1.11.0,<2"]
trio-async = [
    "trio>=0.28.0,<0.29",
    "trio-asyncio>=0.15.0,<0.16",
]
cloud-export-to-parquet = [
    "pandas>=2.2.2,<3 ; python_version >= '3.9' and python_version < '4.0'",
    "numpy>=1.26.0,<2 ; python_version >= '3.9' and python_version < '3.13'",
    "boto3>=1.34.89,<2",
    "pyarrow>=19.0.1",
]

[tool.uv]
default-groups = [
    "dev",
    "bedrock",
    "dsl",
    "encryption",
    "gevent",
    "langchain",
    "open-telemetry",
    "pydantic-converter",
    "sentry",
    "trio-async",
]

[tool.hatch.build.targets.sdist]
include = ["./**/*.py"]

[tool.hatch.build.targets.wheel]
include = ["./**/*.py"]
packages = [
    "activity_worker",
    "bedrock",
    "cloud_export_to_parquet",
    "context_propagation",
    "custom_converter",
    "custom_decorator",
    "custom_metric",
    "dsl",
    "encryption",
    "gevent_async",
    "hello",
    "langchain",
    "message_passing",
    "open_telemetry",
    "patching",
    "polling",
    "prometheus",
    "pydantic_converter",
    "pydantic_converter_v1",
    "pyproject.toml",
    "replay",
    "schedules",
    "sentry",
    "sleep_for_days",
    "tests",
    "trio_async",
    "updatable_timer",
    "worker_specific_task_queues",
    "worker_versioning",
]

[tool.hatch.build.targets.wheel.sources]
"./**/*.py" = "**/*.py"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
format = [{cmd = "uv run black ."}, {cmd = "uv run isort ."}]
lint = [{cmd = "uv run black --check ."}, {cmd = "uv run isort --check-only ."}, {ref = "lint-types" }]
lint-types = "uv run mypy --check-untyped-defs --namespace-packages ."
test = "uv run pytest"

[tool.pytest.ini_options]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"

[tool.isort]
profile = "black"
skip_gitignore = true

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "opentelemetry.*"
ignore_errors = true

